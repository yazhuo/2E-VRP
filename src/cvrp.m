function[best_solution, best_individual_with_zero] = cvrp(CustomSet, demand, distance, K2)n = 100; %种群大小m = size(CustomSet,2);iterition = 100; %迭代次数(遗传代数）Pc = 0.8; %交叉概率Pm = 0.2; %变异概率len = zeros(n,1);best_solution = 99999999;best_individual = zeros(1,m);best_individual_with_zero = [];%----随机父代----family = zeros(n, m);for i = 1:n    family(i,:) = CustomSet(randperm(m));endR = family(1,:);counter = 0;while counter < iterition     %----计算路径长度----    for i = 1:n        [len(i,1), v_count, individual_with_zero] = RouteLength(family(i,:), demand, distance, m, K2);            end        minlen = min(len);    rr = find(len == minlen);    R = family(rr(1,1),:);        temp_family = family;    temp_len = len;    [len] = sort(len);    for i = 1:n        tt = find(temp_len == len(i,1));        family(i,:) = temp_family(tt(1,1),:);    end        for i = 1:m        j = n+1-i;        family(j,:) = family(i,:);    end    %----选择----%    individual_fitness = zeros(n,1);%    family_fitness = 0;%    cur_best_distance = 99999999; %    new_family = zeros(n, m);%    for i = 1:n%        cur_distance = len(i,1);%        if cur_distance < cur_best_distance%            cur_best_distance = cur_distance;%            cur_best_individual = family(i,:);%            cur_best_individual_with_zero = individual_with_zero;%        end%        if cur_distance < best_solution%            best_solution = cur_distance;%            best_individual = family(i,:);%            best_individual_with_zero = cur_best_individual_with_zero;%        end%        individual_fitness(i,1) = 1 / len(i,1);%        family_fitness = family_fitness + individual_fitness(i,1);%    end%    %    disp(best_solution);%    %    select_probability = zeros(n,1);%    probability = 0;%    for i = 1:n%        probability = individual_fitness(i,1) / family_fitness;%        if i ~= 1%            select_probability(i,1) = select_probability(i-1,1) + probability;%        else%            select_probability(i,1) = probability;%        end%    end%    %    for i = 1:n%        x = rand;%        if i == 1 && x < 0.5%            new_family(i,:) = best_individual;%        else%            for j = 1:n%                if x < select_probability(j,1)%                    new_family(i,:) = family(j,:);%                    break;%                end%            end%        end%    end%    %    family = zeros(n,m);%    family = new_family;        %----交叉----    if m > 5        for i = 1:2:n            if Pc > rand                A = family(i,:);                B = family(i+1,:);                [A,B] = intercross(A,B);                family(i,:) = A;                family(i+1,:) = B;            end        end    end        %----变异----    for i = 1:n        if Pm > rand            family(i,:) = mutate(family(i,:));        end    end        %群体的更新    family = [R;family];    [aa,bb] = size(family);    if aa > n        family = family(1:n,:);    end        counter = counter + 1;end[best_solution, count, best_individual_with_zero] = RouteLength(R, demand, distance, m, K2);end